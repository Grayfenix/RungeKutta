# -*- coding: utf-8 -*-
"""MétodoRungeKutta.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1B6491mklOTJ9--ELQHmZ_Vp3VKFzaNI4
"""

#Runge Kutta H. Cubana
import matplotlib.pyplot as plt
import numpy as np
import seaborn as sns
from math import*
def f(t,y):
    func=(t*(0.8-0.3*t))
    return func
def RK4(t0,y0,h,n):
        t=np.zeros(n+1)
        y=np.zeros(n+1)
        t[0]=t0
        y[0]=y0
        print('y(',t[0],')=',y[0])
        for k in range(n):
         k1=f(t[k],y[k])
         k2=f(t[k]+h/2,y[k]+(h/2)*k1)
         k3=f(t[k]+h/2,y[k]+(h/2)*k2)
         k4=f(t[k]+h,y[k]+h*k3)
         y[k+1]=y[k]+(h/6)*(k1+2*k2+2*k3+k4)
         t[k+1]=t[k]+h
         print('y(',round(t[k+1],3),')=',round(y[k+1],3))
        sns.regplot(t,y)
        plt.show()
        plt.plot(t, y)          
RK4(0,1,0.3,15)

#Runge Kutta H. Cubana vs. Cacti
import matplotlib.pyplot as plt
import numpy as np
import seaborn as sns
def f(t,y):
    func=0.8*t + 0.8 - 0.11*t*y
    return func
def g(w,x):
    func1=w*(0.71*x - 0.0003)
    return func1   
def RK4(t0,y0,h,n):
        t=np.zeros(n+1)
        y=np.zeros(n+1)
        t[0]=t0
        y[0]=y0
        w=np.zeros(n+1)
        x=np.zeros(n+1)
        w[0]=t0
        x[0]=y0
        print('y(',t[0],')=',y[0])
        print('x(',w[0],')=',x[0])
        for k in range(n):
         k1=f(t[k],y[k])
         k2=f(t[k]+h/2,y[k]+(h/2)*k1)
         k3=f(t[k]+h/2,y[k]+(h/2)*k2)
         k4=f(t[k]+h,y[k]+h*k3)
         y[k+1]=y[k]+(h/6)*(k1+2*k2+2*k3+k4)
         t[k+1]=t[k]+h
         k1=g(t[k],y[k])
         k2=g(t[k]+h/2,y[k]+(h/2)*k1)
         k3=g(t[k]+h/2,y[k]+(h/2)*k2)
         k4=g(t[k]+h,y[k]+h*k3)
         x[k+1]=y[k]+(h/6)*(k1+2*k2+2*k3+k4)
         w[k+1]=t[k]+h
         print('y(',round(t[k+1],3),')=',round(y[k+1],3))
         print('x(',round(w[k+1],3),')=',round(x[k+1],3))
        sns.regplot(t,y)
        sns.regplot(w,x)        
        plt.show()
        plt.plot(t,y,w,x)        
RK4(0,1,0.3,20)

#Runge Kutta H. Cubana vs. Chrysoperla
import matplotlib.pyplot as plt
import numpy as np
import seaborn as sns
def f(t,y):
    func=0.8*t + 0.8 - 0.01*t*y
    return func
def g(w,x):
    func1=x*(0.63*w - 0.0002*x)
    return func1   
def RK4(t0,y0,h,n):
        t=np.zeros(n+1)
        y=np.zeros(n+1)
        t[0]=t0
        y[0]=y0
        w=np.zeros(n+1)
        x=np.zeros(n+1)
        w[0]=t0
        x[0]=y0
        print('y(',t[0],')=',y[0])
        print('x(',w[0],')=',x[0])
        for k in range(n):
         k1=f(t[k],y[k])
         k2=f(t[k]+h/2,y[k]+(h/2)*k1)
         k3=f(t[k]+h/2,y[k]+(h/2)*k2)
         k4=f(t[k]+h,y[k]+h*k3)
         y[k+1]=y[k]+(h/6)*(k1+2*k2+2*k3+k4)
         t[k+1]=t[k]+h
         k1=g(t[k],y[k])
         k2=g(t[k]+h/2,y[k]+(h/2)*k1)
         k3=g(t[k]+h/2,y[k]+(h/2)*k2)
         k4=g(t[k]+h,y[k]+h*k3)
         x[k+1]=y[k]+(h/6)*(k1+2*k2+2*k3+k4)
         w[k+1]=t[k]+h
         print('y(',round(t[k+1],3),')=',round(y[k+1],3))
         print('x(',round(w[k+1],3),')=',round(x[k+1],3))
        sns.regplot(t,y)
        sns.regplot(w,x)        
        plt.show()
        plt.plot(t,y,w,x)          
RK4(0,1,0.2,20)

#Runge Kutta H. Cubana, Cacti y Chrysoperla
import matplotlib.pyplot as plt
import numpy as np
import seaborn as sns
def f(x,y,z):
    func=x*(0.8 - 0.11*y - 0.01*z - 0.3*x)
    return func

def g(x,w):
    func1=w*(0.71*x - 0.0003*w)
    return func1

def m(u,l):
    func2=l*(0.3*u - 0.0002*l)
    return func2

def RK4(t0,x0,y0,z0,h,n):
        t=np.zeros(n+1)
        y=np.zeros(n+1)
        z=np.zeros(n+1)
        w=np.zeros(n+1)
        x=np.zeros(n+1)
        u=np.zeros(n+1)
        l=np.zeros(n+1)
        t[0]=t0
        y[0]=y0
        z[0]=z0
        w[0]=y0
        x[0]=t0         
        u[0]=t0
        l[0]=z0
        print('y(',t[0],')=',y[0])
        print('z(',t[0],')=',z[0])
        print('t(',t[0],')=',t[0])
        #print('l(',u[0],')=',u[0])
              
        for k in range(n):
         k1=f(x[k],y[k],z[k])
         k2=f(x[k]+h*1/2,(y[k]*1/2 + h*k1*1/2),(z[k]*1/2 + h*k1*1/2))
         k3=f(x[k]+h*1/2,(y[k]*1/2 + h*k2*1/2),(z[k]*1/2 + h*k2*1/2))
         k4=f(x[k]+h*k3,(y[k]+h*k3),(z[k]+h*k3))
         y[k+1]=y[k]+(h/6)*(k1+2*k2+2*k3+k4)
         #t[k+1]=t[k]+h
         k1=f(x[k],y[k],z[k])
         k2=f(x[k]+h*1/2,(y[k]*1/2 + h*k1*1/2),(z[k]*1/2 + h*k1*1/2))
         k3=f(x[k]+h*1/2,(y[k]*1/2 + h*k2*1/2),(z[k]*1/2 + h*k2*1/2))
         k4=f(x[k]+h*k3,(y[k]+h*k3), (z[k]+h*k3))
         z[k+1]=z[k]+(h/6)*(k1+2*k2+2*k3+k4)
         t[k+1]=t[k]+h
        
         k1=m(t[k],y[k])
         k2=m(t[k]+h/2,y[k]+(h/2)*k1)
         k3=m(t[k]+h/2,y[k]+(h/2)*k2)
         k4=m(t[k]+h,y[k]+h*k3)
         l[k+1]=l[k]+(h/6)*(k1+2*k2+2*k3+k4)
         u[k+1]=u[k]+h
         
         k1=g(t[k],y[k])
         k2=g(t[k]+h/2,y[k]+(h/2)*k1)
         k3=g(t[k]+h/2,y[k]+(h/2)*k2)
         k4=g(t[k]+h,y[k]+h*k3)
         w[k+1]=x[k]+(h/6)*(k1+2*k2+2*k3+k4)
         x[k+1]=t[k]+h

         print('y(',round(t[k+1],3),')=',round(y[k+1],3))
         print('z(',round(t[k+1],3),')=',round(z[k+1],3))
         print('t(',round(t[k+1],3),')=',round(t[k+1],3))
         #print('l(',round(u[k+1],3),')=',round(l[k+1],3))
        sns.regplot(t,y)
        sns.regplot(t,z)
        sns.regplot(t,w)
        #sns.regplot(t,l)
        #sns.regplot(t,u)      
        plt.show()
        plt.plot(t,y,t,z,t,w)          
RK4(0,0.002,6.48,8.62,0.2,40)

#Runge Kutta de las ecuaciones dinámicas de H. Cubana, Cacti, Chrysoperla, Leucaena y vaca
import matplotlib.pyplot as plt
import numpy as np
import seaborn as sns
def f(w, k, l, g, y, i, n, fi):
    func=l*(w - k - g*y - i*x - n*v) + fi
    return func

def g(x, lamda, mu, alpha, i, l, c, y, d, z):
    func1=x*(lamda - mu + alpha - i*l - c*y - d*z)
    return func1

def m(y, g, l, c, x, beta):
    func2=y*(g*l + c*x + beta)
    return func2

def p(d, h, z, x, delta):
    func3=z*(h*z + d*x + delta)
    return func3

def r(l, n, sigma):
    func3=(l*n*v + sigma)
    return func4    

def RK4(x0,y0,z0,c0,d0,w0,k0,l0,i0,n0,alpha0,beta0,delta0,mu0,lamda0, sigma0,h,n):
        c=np.zeros(n+1)
        d=np.zeros(n+1)
        c=np.zeros(n+1)
        mu=np.zeros(n+1)
        lamda=np.zeros(n+1)
        delta=np.zeros(n+1)
        y=np.zeros(n+1)
        z=np.zeros(n+1)
        w=np.zeros(n+1)
        x=np.zeros(n+1)
        k=np.zeros(n+1)
        g=np.zeros(n+1)        
        i=np.zeros(n+1)
        n=np.zeros(n+1)         
        alpha=np.zeros(n+1)
        beta=np.zeros(n+1)
        sigma=np.zeros(n+1)

        t[0]=t0
        y[0]=y0
        z[0]=z0
        w[0]=y0
        x[0]=t0         
        u[0]=t0
        l[0]=z0
        print('y(',t[0],')=',y[0])
        print('z(',t[0],')=',z[0])
        print('t(',t[0],')=',t[0])
        #print('l(',u[0],')=',u[0])
              
        for k in range(n):
         k1=f(x[k],y[k],z[k])
         k2=f(x[k]+h*1/2,(y[k]*1/2 + h*k1*1/2),(z[k]*1/2 + h*k1*1/2))
         k3=f(x[k]+h*1/2,(y[k]*1/2 + h*k2*1/2),(z[k]*1/2 + h*k2*1/2))
         k4=f(x[k]+h*k3,(y[k]+h*k3),(z[k]+h*k3))
         y[k+1]=y[k]+(h/6)*(k1+2*k2+2*k3+k4)
         #t[k+1]=t[k]+h
         k1=f(x[k],y[k],z[k])
         k2=f(x[k]+h*1/2,(y[k]*1/2 + h*k1*1/2),(z[k]*1/2 + h*k1*1/2))
         k3=f(x[k]+h*1/2,(y[k]*1/2 + h*k2*1/2),(z[k]*1/2 + h*k2*1/2))
         k4=f(x[k]+h*k3,(y[k]+h*k3), (z[k]+h*k3))
         z[k+1]=z[k]+(h/6)*(k1+2*k2+2*k3+k4)
         t[k+1]=t[k]+h
        
         k1=m(t[k],y[k])
         k2=m(t[k]+h/2,y[k]+(h/2)*k1)
         k3=m(t[k]+h/2,y[k]+(h/2)*k2)
         k4=m(t[k]+h,y[k]+h*k3)
         l[k+1]=l[k]+(h/14)*(k1+2*k2+2*k3+k4)
         u[k+1]=u[k]+h
         
         k1=g(t[k],y[k])
         k2=g(t[k]+h/2,y[k]+(h/2)*k1)
         k3=g(t[k]+h/2,y[k]+(h/2)*k2)
         k4=g(t[k]+h,y[k]+h*k3)
         w[k+1]=x[k]+(h/6)*(k1+2*k2+2*k3+k4)
         x[k+1]=t[k]+h

         print('y(',round(t[k+1],3),')=',round(y[k+1],3))
         print('z(',round(t[k+1],3),')=',round(z[k+1],3))
         print('t(',round(t[k+1],3),')=',round(t[k+1],3))
         #print('l(',round(u[k+1],3),')=',round(l[k+1],3))
        sns.regplot(t,y)
        sns.regplot(t,z)
        sns.regplot(t,w)
        #sns.regplot(t,l)
        #sns.regplot(t,u)      
        plt.show()
        plt.plot(t,y,t,z,w,x,u,l)          
RK4(0,0.002,6.48,8.62,0.2,40)

#Runge Kutta de las ecuaciones dinámicas de H. Cubana, Cacti, Chrysoperla y Leucaena
import numpy as np
import matplotlib.pyplot as plt
def RK4(f, g, s, r, x0, y0, z0, w0, a, b, h):
   
    t = np.arange(a,b+h,h)
    n = len(t)
    x = np.zeros(n); y = np.zeros(n); z =  np.zeros(n); w =  np.zeros(n);
    x[0] = x0; y[0] = y0; z[0] = z0; w[0] = w0;
    
    for i in range(n-1):
        k1 = h*f(x[i],y[i],z[i],w[i],t[i])
        l1 = h*g(x[i],y[i],z[i],w[i],t[i])
        m1 = h*s(x[i],y[i],z[i],w[i],t[i])
        p1 = h*r(x[i],y[i],z[i],w[i],t[i])
        k2 = h*f(x[i]+k1/2,y[i]+k1/2,z[i]+k1/2,w[i]+k1/2,t[i]+h/2)
        l2 = h*g(x[i]+k1/2,y[i]+k1/2,z[i]+k1/2,w[i]+k1/2,t[i]+h/2)
        m2 = h*s(x[i]+k1/2,y[i]+k1/2,z[i]+k1/2,w[i]+k1/2,t[i]+h/2)
        p2 = h*r(x[i]+k1/2,y[i]+k1/2,z[i]+k1/2,w[i]+k1/2,t[i]+h/2)
        k3 = h*f(x[i]+k2/2,y[i]+k2/2,z[i]+k2/2,w[i]+k2/2,t[i]+h/2)
        l3 = h*g(x[i]+k2/2,y[i]+k2/2,z[i]+k2/2,w[i]+k2/2,t[i]+h/2)
        m3 = h*s(x[i]+k2/2,y[i]+k2/2,z[i]+k2/2,w[i]+k2/2,t[i]+h/2)
        p3 = h*r(x[i]+k2/2,y[i]+k2/2,z[i]+k2/2,w[i]+k2/2,t[i]+h/2)
        k4 = h*f(x[i]+k3,y[i]+k3,z[i]+k3,w[i]+k3,t[i]+h)
        l4 = h*g(x[i]+k3,y[i]+k3,z[i]+k3,w[i]+k3,t[i]+h)
        m4 = h*s(x[i]+k3,y[i]+k3,z[i]+k3,w[i]+k3,t[i]+h)
        p4 = h*r(x[i]+k3,y[i]+k3,z[i]+k3,w[i]+k3,t[i]+h)
        x[i+1] = x[i]+(1/6)*(k1+2*k3+2*k3+k4)
        y[i+1] = y[i]+(1/6)*(l1+2*l3+2*l3+l4)
        z[i+1] = z[i]+(1/6)*(m1+2*m2+2*m3+m4)
    #plt.plot(t,x,t,y,t,z,t,w)
    plt.plot(t,x)
    plt.plot(t,y)
    plt.plot(t,z)
    plt.plot(t,w)
    plt.show()

f = lambda x,y,z,w,t: -0.1*x;
g = lambda x,y,z,w,t: -0.1*x-0.2*y;
s = lambda x,y,z,w,t: -0.2*x;
r = lambda x,y,z,w,t: -0.1*x-0.1*y;

RK4(f,g,s,r, 5000,0,5000,0,0,20,0.5)